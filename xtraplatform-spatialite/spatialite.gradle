
ext {
    spatialiteBuildDir = new File(buildDir, 'spatialite')
    spatialiteLibDir = new File(spatialiteBuildDir, 'src/.libs')
    spatialiteLibName = project.osdetector.os == 'osx' ? 'mod_spatialite.dylib' : 'mod_spatialite.so'
}

task downloadSpatialite(type: Download) {
    src "http://www.gaia-gis.it/gaia-sins/libspatialite-sources/libspatialite-${spatialiteVersion}.tar.gz"
    dest new File(new File(System.getProperty("java.io.tmpdir")), "libspatialite-${spatialiteVersion}.tar.gz")
    overwrite false
}

task getSpatialite(dependsOn: downloadSpatialite, type: Copy) {
    from(tarTree(downloadSpatialite.dest)) {
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
            /*if (fcd.path == 'configure') {
                println 'shrext_cmds=\'`test .$module = .yes && echo .so || echo .dylib`\''
                filter { line ->
                    line.replace('shrext_cmds=\'`test .$module = .yes && echo .so || echo .dylib`\'', 'shrext_cmds=\'.dylib\'')
                }
            }*/
            //TODO: checking whether the gcc linker (/Library/Developer/CommandLineTools/usr/bin/ld) supports shared libraries... no
        }
        includeEmptyDirs = false
    }
    into spatialiteBuildDir
    def copyDetails = []
    eachFile { copyDetails << it }
    doLast {
        copyDetails.each { FileCopyDetails details ->
            def target = new File(destinationDir, details.path)
            if(target.exists()) { target.setLastModified(details.lastModified) }
        }
    }
}

task patchSpatialite(dependsOn: getSpatialite, type: Exec) {
    inputs.file("${spatialiteBuildDir}/../../patches/configure-big_sur.diff")
    inputs.file("${spatialiteBuildDir}/../../patches/configure-big_sur-2.diff")
    outputs.file("${spatialiteBuildDir}/configure")
    workingDir spatialiteBuildDir
    commandLine "patch", "configure", "../../patches/configure-big_sur.diff"
    doLast {
      exec { 
        workingDir spatialiteBuildDir
        commandLine "patch", "configure", "../../patches/configure-big_sur-2.diff"     
      }
    }
}

task configureSpatialite(dependsOn: [patchSpatialite, buildZlib, buildSQLite, buildGeos], type: Exec) {
    outputs.dir spatialiteBuildDir
    workingDir spatialiteBuildDir
    environment "CPPFLAGS", "-I${zlibBuildDir} -I${geosIncludeDir} -I${geosIncludeDir2} -I${sqliteBuildDir}"
    environment "CFLAGS", "-I${zlibBuildDir} -I${geosIncludeDir} -I${geosIncludeDir2} -I${sqliteBuildDir}"
    environment "LDFLAGS", "-L${zlibBuildDir} -L${sqliteLibDir} -L${geosLibDir}"
    environment "SQLITE3_CFLAGS", "-I${zlibBuildDir} -I${geosIncludeDir} -I${geosIncludeDir2} -I${sqliteBuildDir}"
    environment "SQLITE3_LIBS", "-L${zlibBuildDir} -L${sqliteLibDir} -L${geosLibDir}"
    commandLine './configure', '--enable-module-only', '--enable-shared', '--disable-static', '--enable-examples=no', '--enable-minizip=no', '--enable-libxml2=no', '--enable-rttopo=no', '--enable-gcp=no', '--enable-geos=yes', '--enable-epsg=no', '--enable-freexl=no', '--enable-proj=no', '--enable-mathsql=n', "--with-geosconfig=${geosConfig}"
    doLast {
        println "-I${zlibBuildDir} -I${geosIncludeDir} -I${geosIncludeDir2} -I${sqliteBuildDir}"
    }
}

task buildSpatialite(dependsOn: configureSpatialite, type: Exec) {
    outputs.dir spatialiteBuildDir
    outputs.dir spatialiteLibDir
    workingDir spatialiteBuildDir
    commandLine 'make'
}

task copySpatialiteLib(dependsOn: buildSpatialite, type: Copy) {
    from(spatialiteLibDir) {
        include spatialiteLibName
    }
    into embeddedDataDir
}

tasks.processResources.dependsOn copySpatialiteLib
