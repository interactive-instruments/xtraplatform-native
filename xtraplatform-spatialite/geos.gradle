
ext {
    geosVersion = '3.9.5'
}

ext {
    geosBuildDir = new File(buildDir, 'geos')
    geosIncludeDir = new File(geosBuildDir, 'capi')
    geosIncludeDir2 = new File(geosBuildDir, 'include')
    geosLibDir = new File(geosBuildDir, 'lib')
    geosConfig = new File(geosBuildDir, 'tools/geos-config')
    geosLibName = project.osdetector.os == 'osx' ? 'libgeos.dylib' : 'libgeos.so'
    geosLibName2 = project.osdetector.os == 'osx' ? 'libgeos_c.dylib' : 'libgeos_c.so'
}

task downloadGeos(type: Download) {
    src "http://download.osgeo.org/geos/geos-${geosVersion}.tar.bz2"
    dest new File(new File(System.getProperty("java.io.tmpdir")), "geos-${geosVersion}.tar.bz2")
    overwrite false
}

task getGeos(dependsOn: downloadGeos, type: Copy) {
    from(tarTree(downloadGeos.dest)) {
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
        includeEmptyDirs = false
    }
    into geosBuildDir
    def copyDetails = []
    eachFile { copyDetails << it }
    doLast {
        copyDetails.each { FileCopyDetails details ->
            def target = new File(destinationDir, details.path)
            if(target.exists()) { target.setLastModified(details.lastModified) }
        }
    }
}

task buildGeos2(type: Exec) {
    workingDir geosBuildDir
    commandLine 'chmod', '+x', "${geosConfig}"
}

task patchGeos(dependsOn: getGeos, type: Exec) {
    inputs.file("${geosBuildDir}/../../patches/WKBWriter.h.patch")
    outputs.file("${geosBuildDir}/include/geos/io/WKBWriter.h")
    workingDir geosBuildDir
    commandLine "patch", "include/geos/io/WKBWriter.h", "../../patches/WKBWriter.h.patch"
}

task configureGeos(dependsOn: [patchGeos], type: Exec) {
    finalizedBy buildGeos2
    outputs.dir geosBuildDir
    workingDir geosBuildDir
    commandLine 'cmake', '-DCMAKE_BUILD_TYPE=Release', "-DCMAKE_INSTALL_PREFIX=${geosBuildDir}", "."
}

task buildGeos(dependsOn: configureGeos, type: Exec) {
    finalizedBy buildGeos2
    outputs.dir geosBuildDir
    outputs.dir geosLibDir
    workingDir geosBuildDir
    commandLine 'make'
}

task copyGeosLib(dependsOn: buildGeos, type: Copy) {
    from(geosLibDir) {
        include geosLibName
        include geosLibName2
    }
    into embeddedLibDir
}

tasks.processResources.dependsOn copyGeosLib
