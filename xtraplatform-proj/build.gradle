plugins {
    id "de.undercouch.download" version "4.1.2"
}

maturity = 'CANDIDATE'

ext {
    //TODO: when changed, adjust ProjLoaderImpl.getName (can we inject it?)
    projVersion = '9.1.0'
    buildVersion = '1'
    generatedResourcesDir = new File(buildDir, 'generated/src/main/resources/')
    embeddedLibDir = new File(generatedResourcesDir, "proj-${projVersion}-${buildVersion}/lib")
    embeddedDataDir = new File(generatedResourcesDir, "proj-${projVersion}-${buildVersion}/data")
}

project.sourceSets.main.output.dir(generatedResourcesDir)

apply from: 'sqlite.gradle'
apply from: 'zlib.gradle'
apply from: 'tiff.gradle'
apply from: 'proj.gradle'
apply from: 'proj-jni.gradle'

repositories {
    exclusiveContent {
        forRepository {
            mavenLocal()
        }
        filter {
            includeModule('org.kortforsyningen','proj')
        }
    }
}

dependencies {
    provided project(':xtraplatform-nativ-loader')
    
    embeddedExport files(tasks.findByName('installProjJni'))//group: 'org.kortforsyningen', name: 'proj', version: projJniVersion
    embeddedExport group: 'org.opengis', name: 'geoapi', version: geoApiVersion
}

configurations.embeddedExport {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

moduleInfo {
    exports = [
        'org.kortforsyningen.proj',
        'org.kortforsyningen.proj.spi'
    ]
    requires = [
        'java.logging',
    ] 
    uses = [
        'javax.measure.spi.ServiceProvider'
    ]
}

project.afterEvaluate {
    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://dl.interactive-instruments.de/repository/maven-releases/"
                def snapshotsRepoUrl = "https://dl.interactive-instruments.de/repository/maven-snapshots/"

                name = 'projJni'
                url projJniVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username project.findProperty('deployUser') ?: ''
                    password project.findProperty('deployPassword') ?: ''
                }
            }
        }
        publications {
            projJni(MavenPublication) {
                artifact files(configurations.embeddedExport).find { it.name.startsWith("proj-") }
                groupId = 'org.kortforsyningen'
                artifactId = 'proj'
                version = projJniVersion
                pom.withXml {
                    def dependencies = asNode().appendNode("dependencies")
                    project.configurations.embeddedExport.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                        dep.children.each { child ->
                            def depNode = dependencies.appendNode("dependency")
                            depNode.appendNode("groupId", child.moduleGroup)
                            depNode.appendNode("artifactId", child.moduleName)
                            depNode.appendNode("version", child.moduleVersion)
                        }
                    }
                }
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.projJni &&
                publication == publishing.publications.projJni) ||
                (repository != publishing.repositories.projJni &&
                        publication != publishing.publications.projJni)
    }
}
tasks.withType(GenerateModuleMetadata).configureEach {
    // The value 'enforced-platform' is provided in the validation
    // error message you got
    suppressedValidationErrors.add('enforced-platform')
}
